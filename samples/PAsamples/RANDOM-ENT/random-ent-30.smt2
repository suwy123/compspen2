(set-logic QF_SLAH)

(declare-datatypes ((data_t 0)) (((c_data_t (sz Int)))))

(declare-heap (Int data_t))

(define-fun hck ((?x Int) (?y Int) (?v Int)) Bool
	(and
		(>= (- ?y ?x) 2) (<= (- ?y ?x) ?v)
		(sep (pto ?x (c_data_t (- ?y ?x))) (blk (+ ?x 1) ?y))
))

(define-fun-rec hls ((?x Int) (?y Int) (?v Int)) Bool
	(or
		(and (= ?x ?y) (_ emp Int data_t))
		(exists ((?w Int)) (sep (hck ?x ?w ?v) (hls ?w ?y ?v)))
))

(declare-const x0 Int)
(declare-const x1 Int)
(declare-const x2 Int)
(declare-const x3 Int)
(declare-const x4 Int)
(declare-const x5 Int)
(declare-const v4 Int)
(declare-const x6 Int)
(declare-const x7 Int)
(declare-const x8 Int)
(declare-const x9 Int)
(declare-const x10 Int)
(declare-const x11 Int)
(declare-const x12 Int)
(declare-const x13 Int)
(declare-const v12 Int)
(declare-const x14 Int)
(declare-const x15 Int)
(declare-const v14 Int)
(declare-const x16 Int)
(declare-const x17 Int)
(declare-const x18 Int)
(declare-const x19 Int)
(declare-const x20 Int)
(declare-const x21 Int)
(declare-const x22 Int)
(declare-const x23 Int)
(declare-const x24 Int)
(declare-const x25 Int)
(declare-const x26 Int)
(declare-const x27 Int)
(declare-const x28 Int)
(declare-const x29 Int)

(assert(and
(= x1 2) (= x2 (+ x0 1)) (= x4 (+ x2 1)) (> v4 2) (= x13 x14) (= v12 v14)
(= (+ x16 1) x18) (= x19 (+ x16 x17)) (= x21 x22) (= x23 x24)
(sep
(pto x0 (c_data_t x1))
(pto x2 (c_data_t x3))
(hls x4 x5 v4)
(pto x6 (c_data_t x7))
(pto x8 (c_data_t x9))
(blk x10 x11)
(hls x12 x13 v12)
(hls x14 x15 v14)
(pto x16 (c_data_t x17))
(blk x18 x19)
(blk x20 x21)
(blk x22 x23)
(blk x24 x25)
(pto x26 (c_data_t x27))
(blk x28 x29)
)))

(assert(not
(sep
(hls x0 x5 v4)
(pto x6 (c_data_t x7))
(pto x8 (c_data_t x9))
(blk x10 x11)
(hls x12 x15 v14)
(hls x16 x19 x17)
(blk x20 x25)
(pto x26 (c_data_t x27))
(blk x28 x29)
)))

(check-sat)